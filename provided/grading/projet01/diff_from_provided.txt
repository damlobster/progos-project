bmblock.h:
7d6
<  * @author Edouard Bugnion
11d9
< #include <stddef.h> // for size_t
26c24
<  * between min and max (included, thus (max-min+1) elements).
---
>  * between min and may (included, thus (max-min+1) elements).


unixv6fs.h:
8c8
<  * This file is a revision from Edouard Bugnion of a file created by
---
>  * This file is an revision from Edouard Bugnion of a file created by
19d18
<  * @author original UNIX v6 team + Mendel Rosenblum (Stanford) + Edouard Bugnion
35c34
<  * inodes                | s_inode_start  | s_inode_start+s_isize-1
---
>  * inodes                | s_inode_start  | s_inode_start_s_isize-1
150c149
< // Max. number of sector locations held in an inode
---
> // Max. number of sector locations hold in an inode
202,204c201,209
<     /* TODO WEEK 04:
<      * la première chose à faire est de définir cette structure.
<      */
---
> 	uint16_t i_mode;
> 	uint8_t i_nlink;
> 	uint8_t i_uid;
> 	uint8_t i_gid;
> 	uint8_t i_size0;
> 	uint16_t i_size1;
> 	uint16_t i_addr[ADDR_SMALL_LENGTH];
> 	uint16_t i_atime[2];
> 	uint16_t i_mtime[2];


mount.h:
7d6
<  * @author Edouard Bugnion
46a46,48
> /*
>  * staff only; students will not have to implement
>  */


error.h:
7d6
<  * @author Edouard Bugnion


inode.h:
7d6
<  * @author Edouard Bugnion
19c18
<  * @brief Return the size of a file associated to a given inode.
---
>  * @brief Return the size of a given inode.
29,30c28
< static inline int32_t inode_getsize(const struct inode *inode)
< {
---
> static inline int32_t inode_getsize(const struct inode *inode) {
48,49c46
< static inline int32_t inode_getsectorsize(const struct inode *inode)
< {
---
> static inline int32_t inode_getsectorsize(const struct inode *inode) {
90c87
<  * @return >0: the sector on disk;  <0 error
---
>  * @return >0: the sector on disk;  0: unallocated;  <0 error
108c105
< int inode_write(struct unix_filesystem *u, uint16_t inr, const struct inode *inode);
---
> int inode_write(struct unix_filesystem *u, uint16_t inr, struct inode *inode);


sector.h:
7d6
<  * @author Edouard Bugnion
31c30
<  * @brief write one 512-byte sector from the virtual disk
---
>  * @brief read one 512-byte sector from the virtual disk
37c36
< int sector_write(FILE *f, uint32_t sector, const void *data);
---
> int sector_write(FILE *f, uint32_t sector, void  *data);


direntv6.h:
7d6
<  * @author Edouard Bugnion
20,22c19,20
< struct directory_reader {
<     /* TODO WEEK 06:
<      * définir cette structure.
---
> /**
>  * Helper struct for reading a directory
24c22,26
<     int unused; // so that it can compile before WEEK 6
---
> struct directory_reader {
>     struct filev6 fv6; // the filesystem
>     struct direntv6 dirs[DIRENTRIES_PER_SECTOR]; //the current dir contents chunk
>     uint32_t cur; // the current file/dir
>     uint32_t last; // the last file in the chunk
34c36,37
< int direntv6_opendir(const struct unix_filesystem *u, uint16_t inr, struct directory_reader *d);
---
> int direntv6_opendir(const struct unix_filesystem *u, uint16_t inr,
>         struct directory_reader *d);
38c41
<  * @param d the directory reader
---
>  * @param d the dierctory reader
43c46,47
< int direntv6_readdir(struct directory_reader *d, char *name, uint16_t *child_inr);
---
> int direntv6_readdir(struct directory_reader *d, char *name,
>         uint16_t *child_inr);
46c50
<  * @brief debugging routine; print a subtree (note: recursive)
---
>  * @brief debugging routine; print the a subtree (note: recursive)
52c56,57
< int direntv6_print_tree(const struct unix_filesystem *u, uint16_t inr, const char *prefix);
---
> int direntv6_print_tree(const struct unix_filesystem *u, uint16_t inr,
>         const char *prefix);
57,58c62,63
<  * @param inr the root of the subtree
<  * @param entry the pathname relative to the subtree
---
>  * @param inr the current of the subtree
>  * @param entry the prefix to the subtree
61c66,67
< int direntv6_dirlookup(const struct unix_filesystem *u, uint16_t inr, const char *entry);
---
> int direntv6_dirlookup(const struct unix_filesystem *u, uint16_t inr,
>         const char *entry);


filev6.h:
7d6
<  * @author Edouard Bugnion
26c25
<  * @brief open the file corresponding to a given inode; set offset to zero
---
>  * @brief open up a file corresponding to a given inode; set offset to zero
28c27
<  * @param inr the inode number (IN)
---
>  * @param inr he inode number (IN)
30c29
<  * @return 0 on success; the appropriate error code (<0) on error
---
>  * @return 0 on success; <0 on errror
46,47c45
<  * @return >0: the number of bytes of the file read; 0: end of file;
<  *             the appropriate error code (<0) on error
---
>  * @return >0: the number of bytes of the file read; 0: end of file; <0 error
68c66
< int filev6_writebytes(struct unix_filesystem *u, struct filev6 *fv6, const void *buf, int len);
---
> int filev6_writebytes(struct unix_filesystem *u, struct filev6 *fv6, void *buf, int len);


sha.h:
7d6
<  * @author Aurélien Soccard
28c27
<  * @param inode the inode of which we want to print the content
---
>  * @param inode the inocde of which we want to print the content
31c30
< void print_sha_inode(struct unix_filesystem *u, struct inode inode, int inr);
---
> void print_sha_inode(const struct unix_filesystem *u, struct inode inode, int inr);


test-core.c:
5d4
<  * @author Aurélien Soccard & Jean-Cédric Chappelier

